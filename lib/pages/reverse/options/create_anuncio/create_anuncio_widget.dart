import 'package:auto_size_text/auto_size_text.dart';import 'package:dona_do_santo/backend/schema/notifications_record.dart';import 'package:dona_do_santo/components/reverse_builder.dart';import 'package:dona_do_santo/components/search_filters_dialog.dart';import 'package:dona_do_santo/custom_code/actions/convertDoubleToString.dart';import 'package:dona_do_santo/custom_code/actions/convertStringToDouble.dart';import 'package:dona_do_santo/custom_code/widgets/components.dart'as components;import 'package:dona_do_santo/custom_code/widgets/home_page.dart' as homePage;import 'package:dropdown_button2/dropdown_button2.dart';import 'package:easy_debounce/easy_debounce.dart';import 'package:firebase_storage/firebase_storage.dart';import 'package:flutter/material.dart';import 'package:font_awesome_flutter/font_awesome_flutter.dart';import 'package:lottie/lottie.dart';import '../../../../flutter_flow/form_field_controller.dart';import '/backend/backend.dart';import '/flutter_flow/flutter_flow_theme.dart';import '/flutter_flow/flutter_flow_util.dart';import '/flutter_flow/upload_data.dart';import '../../../../auth/firebase_auth/auth_util.dart';import '../../../../backend/firebase_storage/storage.dart';import '../../../../backend/schema/reverse_store_record.dart';import '../../../../backend/schema/structs/store_struct.dart';import '../../../../custom_code/actions/confirmation_dialog.dart';import '../../../../custom_code/actions/show_snack_bar.dart';import '../../../../flutter_flow/flutter_flow_choice_chips.dart';import '../../../../flutter_flow/flutter_flow_icon_button.dart';class CreateAnuncioWidget extends StatefulWidget { const CreateAnuncioWidget(     {super.key, this.solicitacao, this.reverseStoreDoc}); final DocumentReference? solicitacao; final DocumentReference? reverseStoreDoc; @override State<CreateAnuncioWidget> createState() => _CreateAnuncioWidgetState();}class _CreateAnuncioWidgetState extends State<CreateAnuncioWidget> { final scaffoldKey = GlobalKey<ScaffoldState>(); final FocusNode unfocusNode = FocusNode(); @override void dispose() {  super.dispose();  unfocusNode.dispose(); } @override Widget build(BuildContext context) {  return GestureDetector(   onTap: () => unfocusNode.canRequestFocus       ? FocusScope.of(context).requestFocus(unfocusNode)       : FocusScope.of(context).unfocus(),   child: Scaffold(    key: scaffoldKey,    backgroundColor: FlutterFlowTheme.of(context).primaryBackground,    body: SafeArea(     top: true,     child: widget.solicitacao != null         ? StreamBuilder<SolicitacoesRecord>(         stream: FFAppState().storeRequest(          uniqueQueryKey: widget.solicitacao?.id,          requestFn: () =>              SolicitacoesRecord.getDocument(widget.solicitacao!),         ),         builder: (context, snapshot) {          if (!snapshot.hasData) {           return const components.LoadingIcon();          }          return CreateAnuncioPage(           solicitacao: snapshot.data!,          );         })         : widget.reverseStoreDoc != null         ? StreamBuilder<ReverseStoreRecord>(      stream: FFAppState().reverseStoreItem(       uniqueQueryKey: widget.reverseStoreDoc!.id,       requestFn: () => ReverseStoreRecord.getDocument(widget.reverseStoreDoc!),      ),      builder: (context, snapshot) {       // Customize what your widget looks like when it's loading.       if (!snapshot.hasData) {        return const components.LoadingIcon();       }       return CreateAnuncioPage(        solicitacao: snapshot.data!,       );      },     )         : const CreateAnuncioPage(),    ),   ),  ); }}class CreateAnuncioPage extends StatefulWidget { final GeneralInfo? solicitacao; const CreateAnuncioPage({  super.key,  this.solicitacao, }); @override State<CreateAnuncioPage> createState() => CreateAnuncioPageState();}class CreateAnuncioPageState extends State<CreateAnuncioPage> { final GlobalKey<FormState> step1formKey = GlobalKey<FormState>(); final GlobalKey<FormState> step3formKey = GlobalKey<FormState>(); final TextEditingController titleController = TextEditingController(); final TextEditingController descriptionController = TextEditingController(); final TextEditingController priceController = TextEditingController(); final FocusNode titleFocusNode = FocusNode(); final FocusNode descriptionFocusNode = FocusNode(); final FocusNode priceFocusNode = FocusNode(); final GlobalKey<_ImagePicker> imagePickerKey = GlobalKey<_ImagePicker>(); final GlobalKey<SearchableDropDownState> searchableDropdownKey = GlobalKey<SearchableDropDownState>(); bool isDataUploading = false; double currentProgress = 0.0; String message = ''; final step2Key = GlobalKey<StepInformacoesPecaState>(); @override void initState() {  super.initState();  if (widget.solicitacao != null) {   titleController.text = widget.solicitacao!.title;   descriptionController.text = widget.solicitacao!.description;   priceController.text = convertDoubleToString(widget.solicitacao!.price);  } } @override void dispose() {  titleController.dispose();  descriptionController.dispose();  priceController.dispose();  titleFocusNode.dispose();  descriptionFocusNode.dispose();  priceFocusNode.dispose();  super.dispose(); } int currentStep = 0; List<Step> getSteps() => [  Step(   state: currentStep > 0 ? StepState.complete : StepState.indexed,   isActive: true,   title: returnStepTitle('Geral'),   content: StepInformacoesGerais(    formKey: step1formKey,    titleController: titleController,    titleFocusNode: titleFocusNode,    descriptionController: descriptionController,    descriptionFocusNode: descriptionFocusNode,    imagePickerKey: imagePickerKey,    solicitacao: widget.solicitacao,   ),  ),  Step(   state: currentStep > 1 ? StepState.complete : StepState.indexed,   isActive: currentStep >= 1,   title: returnStepTitle('Peça'),   content: Column(    children: [     Text(      'Selecione as tags que melhor descrevem sua peça para ajudar os compradores a encontrar seu produto rapidamente',      textAlign: TextAlign.center,      style: FlutterFlowTheme.of(context).bodyMedium.override(       fontFamily: 'Readex Pro',       color: const Color(0xFF343533),       letterSpacing: 0,      ),     ),     StepInformacoesPeca(      key: step2Key,      genderInitialValue: widget.solicitacao?.gender,      categoryInitialValue: widget.solicitacao?.category,      sizeInitialValue: widget.solicitacao?.size,     ),    ],   ),  ),  Step(   state: currentStep > 2 ? StepState.complete : StepState.indexed,   isActive: currentStep >= 2,   title: returnStepTitle('Avançado'),   content: StepAvancado(    formKey: step3formKey,    priceController: priceController,    priceFocusNode: priceFocusNode,    searchableDropDownKey: searchableDropdownKey,    possibleSolicitacao: widget.solicitacao,   ),  ), ]; Text returnStepTitle(String title) {  return Text(   title,   style: FlutterFlowTheme.of(context).bodyMedium.override(    fontFamily: 'Readex Pro',    fontSize: 14,    fontWeight: FontWeight.w500,   ),  ); } bool verifyForms() {  switch (currentStep) {   case 0:    if (imagePickerKey.currentState!.verifyUploadedFiles()) {     if (mounted) {      showSnackBar(          context,          'Alto lá',          "Certifique-se de ter selecionado ao menos ${imagePickerKey.currentState!.minImageLimit} imagem e preenchido os campos corretamente",          "failure");     }     return false;    }    if (!step1formKey.currentState!.validate()) return false;    return true;   case 1:    if (step2Key.currentState!.selectedGender == null) {     if (mounted) {      showSnackBar(          context,          'Alto lá',          "Certifique-se de ter selecionado o sexo antes de prosseguir",          "failure");     }     return false;    }    if (step2Key.currentState!.selectedCategory == null) {     if (mounted) {      showSnackBar(          context,          'Alto lá',          "Certifique-se de ter selecionado a categoria antes de prosseguir",          "failure");     }     return false;    }    if (step2Key.currentState!.selectedCategory == 'Acessórios')     return true;    if (step2Key.currentState!.selectedSize == null) {     if (mounted) {      showSnackBar(          context,          'Alto lá',          "Certifique-se de ter selecionado o tamanho antes de prosseguir",          "failure");     }     return false;    }    return true;   case 2:    if (!step3formKey.currentState!.validate()) return false;    return true;   default:    return true;  } } @override Widget build(BuildContext context) {  return isDataUploading      ? LoadingWidget(   currentProgress: currentProgress,   message: message,  )      : SingleChildScrollView(   child: Stack(    children: [     Column(      children: [       const SizedBox(        height: 150,       ),       //Margem para não interferir com a AppBar       //ElevatedButton(onPressed: createdDummyValues, child: const Text("Create dummy values")),       SizedBox(        width: MediaQuery.of(context).size.width,        height: MediaQuery.of(context).size.height - 160,        child: Theme(         data: ThemeData(          canvasColor:          FlutterFlowTheme.of(context).primaryBackground,          colorScheme: Theme.of(context).colorScheme.copyWith(           primary: FlutterFlowTheme.of(context).secondary,           surface:           FlutterFlowTheme.of(context).secondaryText,           secondary:           const Color.fromARGB(255, 79, 76, 175),          ),         ),         child: Stepper(          type: StepperType.horizontal,          steps: getSteps(),          currentStep: currentStep,          onStepContinue: () async {           if (!verifyForms()) return;           if (currentStep != getSteps().length - 1) {            setState(() {             currentStep += 1;            });            return;           }           bool isConfirmed =           await confirmationDialog(context);           if (!isConfirmed) return;           //cache globalKey values in local variables           final gender = step2Key.currentState!.selectedGender;           final category = step2Key.currentState!.selectedCategory;           final size = category == 'Acessórios'               ? 'Tamanho Único'               : step2Key.currentState!.selectedSize;           final store = StoreStruct(            address: searchableDropdownKey                .currentState                ?.storesDict[searchableDropdownKey                .currentState?.selectedValue]                ?.address,            storeImage: searchableDropdownKey                .currentState                ?.storesDict[searchableDropdownKey                .currentState?.selectedValue]                ?.imagePath,            formattedAddress: searchableDropdownKey                .currentState?.selectedValue,           );           final List<FFUploadedFile> locallyUpdatedFiles =               imagePickerKey.currentState!.uploadedLocalFiles;           final List<String> imagesToDelete = imagePickerKey               .currentState!.firebaseImagesToDelete;           final List<String> alreadyUploadedImages =               imagePickerKey                   .currentState!.uploadedFirebaseImages;           int amountOfSteps = 2;           setState(() {            isDataUploading = true;           });           if (imagesToDelete.isNotEmpty) {            setState(() {             message =             'Excluindo as imagens antigas do anúncio...';             amountOfSteps = 3;            });            for (String url in imagesToDelete) {             await FirebaseStorage.instance                 .refFromURL(url)                 .delete();             setState(() {              currentProgress += (1 / amountOfSteps) /                  imagesToDelete.length;             });            }           }           setState(() {            message =            'Fazendo upload das imagens do anúncio...';           });           //upload images to firebase           var selectedMedia = <SelectedFile>[];           List<Object> downloadUrls = <String>[];           try {            selectedMedia = selectedFilesFromUploadedFiles(             locallyUpdatedFiles,             isMultiData: true,            );            downloadUrls = (await Future.wait(             selectedMedia.map((m) async {              // Upload the data              final url =              await uploadData(m.storagePath, m.bytes);              // Update the progress              if (url != null) {               setState(() {                currentProgress += (1 / amountOfSteps) /                    selectedMedia.length;               });              }              return url;             }),            ))                .where((u) => u != null)                .map((u) => u!)                .toList();            if (widget.solicitacao != null) {             setState(() {              message = 'Atualizando seu anúncio...';             });             if(widget.solicitacao!.docRef.path.startsWith('solicitacoes/')){              widget.solicitacao?.docRef.update({               ...createSolicitacoesRecordData(                description: descriptionController.text,                negated: false,                gender: gender,                category: category,                size: size,                store: store,                price: convertStringToDouble(PriceField.finalPrice!),                createdTime: getCurrentTimestamp,                createdBy: currentUserReference,                title: titleController.text,                createdByEmail: currentUserEmail,               ),               ...mapToFirestore(                {                 'images': [                  ...alreadyUploadedImages,                  ...downloadUrls                 ],                },               ),              });             }             else {              await createSolicitacao(gender, category, size, store, alreadyUploadedImages, downloadUrls);              await widget.solicitacao!.docRef.delete();             }            } else {             setState(() {              message = 'criando seu anúncio...';             });             await createSolicitacao(gender, category, size, store, alreadyUploadedImages, downloadUrls);            }            setState(() {             currentProgress = 1.0;             message = 'Tudo feito!';            });            await Future.delayed(                const Duration(milliseconds: 500));            if (context.mounted) {             ScaffoldMessenger.of(context)                 .hideCurrentSnackBar();             showSnackBar(context, 'Sucesso!',                 'Seu anúncio está em revisão', "success");             context.pushNamed('HomePage');            }           } catch (e) {            print(e);           }          },          onStepCancel: () {           setState(() {            currentStep == 0 ? null : currentStep -= 1;           });          },          controlsBuilder: (context, controlsDetails) {           return Container(            margin: const EdgeInsets.only(top: 50),            child: Row(             children: [              if (currentStep >= 1)               Expanded(                child: ElevatedButton(                 style: ElevatedButton.styleFrom(                  backgroundColor:                  FlutterFlowTheme.of(context)                      .primaryBackground,                 ),                 onPressed: controlsDetails.onStepCancel,                 child: Text(                  'VOLTAR',                  style: FlutterFlowTheme.of(context)                      .labelMedium                      .override(                      fontFamily: 'Readex Pro',                      fontSize: 13,                      color: FlutterFlowTheme.of(                          context)                          .primaryText),                 ),                ),               ),              const SizedBox(width: 12),              Expanded(               child: ElevatedButton(                style: ElevatedButton.styleFrom(                 backgroundColor:                 FlutterFlowTheme.of(context)                     .secondary,                ),                onPressed: controlsDetails.onStepContinue,                child: Text(                 currentStep == getSteps().length - 1                     ? 'FINALIZAR'                     : 'PRÓXIMO',                 style: FlutterFlowTheme.of(context)                     .labelMedium                     .override(                     fontFamily: 'Readex Pro',                     fontSize: 13,                     color:                     FlutterFlowTheme.of(context)                         .primaryText),                ),               ),              ),             ],            ),           );          },         ),        ),       ),      ].divide(const SizedBox(height: 10)),     ),     Material(      elevation: 1.0,      color: FlutterFlowTheme.of(context).primaryBackground,      child: Padding(       padding: const EdgeInsets.all(12),       child: components.AppBarWithGoBackArrow(        mainColor: FlutterFlowTheme.of(context).primaryText,        secondaryColor: FlutterFlowTheme.of(context).tertiary,       ),      ),     )    ],   ),  ); } Future<void> createSolicitacao(gender, category, size, store, alreadyUploadedImages, downloadUrls) async {  await SolicitacoesRecord.collection.doc().set({   ...createSolicitacoesRecordData(    description: descriptionController.text,    negated: false,    gender: gender,    category: category,    size: size,    store: store,    price: convertStringToDouble(PriceField.finalPrice ?? ''),    createdTime: getCurrentTimestamp,    createdBy: currentUserReference,    title: titleController.text,    createdByEmail: currentUserEmail   ),   ...mapToFirestore(    {     'images': [      ...alreadyUploadedImages,      ...downloadUrls     ],    },   ),  }); }}class LoadingWidget extends StatelessWidget { final double currentProgress; final String message; const LoadingWidget({  super.key,  required this.currentProgress,  required this.message, }); @override Widget build(BuildContext context) {  return Column(   mainAxisSize: MainAxisSize.max,   mainAxisAlignment: MainAxisAlignment.center,   children: [    Lottie.asset(     'assets/lottie_animations/sendingData.json',     width: MediaQuery.of(context).size.width - 100,     height: MediaQuery.of(context).size.width - 100,     fit: BoxFit.cover,     frameRate: const FrameRate(120),     animate: true,    ),    Text(     'Criando seu anúncio',     style: FlutterFlowTheme.of(context).bodyMedium.override(      fontFamily: 'Readex Pro',      fontSize: 24,      fontWeight: FontWeight.bold,     ),    ),    const SizedBox(height: 30),    Padding(     padding: const EdgeInsets.only(left: 40, right: 40),     child: TweenAnimationBuilder(      tween: Tween<double>(begin: 0, end: currentProgress),      duration: const Duration(milliseconds: 500),      // Adjust this duration as needed      builder: (context, double value, child) {       return LinearProgressIndicator(        value: value, // This smoothly updates the progress        backgroundColor: FlutterFlowTheme.of(context).secondary,        valueColor: AlwaysStoppedAnimation<Color>(            FlutterFlowTheme.of(context).primaryText),       );      },     ),    ),    Text(     message,     style: FlutterFlowTheme.of(context).bodyMedium.override(      fontFamily: 'Readex Pro',      fontSize: 15,      fontWeight: FontWeight.normal,     ),    )   ].divide(const SizedBox(height: 10)),  ); }}class AddMoreImages extends StatelessWidget { final Function() onPressed; const AddMoreImages({super.key, required this.onPressed}); @override Widget build(BuildContext context) {  return InkWell(   onTap: () {    onPressed();   },   child: Container(    decoration: BoxDecoration(     border: Border.all(         color: FlutterFlowTheme.of(context).primaryText, width: 2),     borderRadius: BorderRadius.circular(12),    ),    child: Padding(     padding: const EdgeInsets.all(4),     child: Column(      mainAxisSize: MainAxisSize.max,      mainAxisAlignment: MainAxisAlignment.spaceEvenly,      children: [       FlutterFlowIconButton(        borderRadius: 8,        borderWidth: 1,        buttonSize: 50,        fillColor: FlutterFlowTheme.of(context).secondary,        icon: Icon(         Icons.add,         color: FlutterFlowTheme.of(context).primaryText,         size: 27,        ),       ),       Text(        'Adicionar',        textAlign: TextAlign.center,        style: FlutterFlowTheme.of(context).bodyMedium.override(            fontFamily: 'Readex Pro',            fontSize: 12,            fontWeight: FontWeight.bold),       ),      ],     ),    ),   ),  ); }}class StepInformacoesGerais extends StatelessWidget { final GlobalKey<FormState> formKey; final TextEditingController titleController; final TextEditingController descriptionController; final FocusNode titleFocusNode; final FocusNode descriptionFocusNode; final GlobalKey<_ImagePicker> imagePickerKey; final GeneralInfo? solicitacao; const StepInformacoesGerais({  super.key,  required this.formKey,  required this.titleController,  required this.descriptionController,  required this.titleFocusNode,  required this.descriptionFocusNode,  required this.imagePickerKey,  this.solicitacao, }); @override Widget build(BuildContext context) {  return Form(   key: formKey,   child: Column(    children: [     ImagePicker(key: imagePickerKey, solicitacao: solicitacao),     TextInputField(      controller: titleController,      focusNode: titleFocusNode,      label: 'Insira o nome da peça',      icon: Icons.drive_file_rename_outline,      maxLines: 1,      validator: (value) {       if (value == null || value.isEmpty) return 'Campo obrigatório';       if (value.length < 5) return "Insira um título com no mínimo 5 caracteres";       return null;      },     ),     TextInputField(      controller: descriptionController,      focusNode: descriptionFocusNode,      label:      'Insira uma descrição sobre a peça, tempo de uso, condição, etc...',      icon: Icons.chat_bubble,      maxLines: 4,      validator: (value) {       if (value == null || value.isEmpty) return 'Campo obrigatório';       if (value.length < 20) return "Insira uma descrição com no mínimo 20 caracteres";       return null;      },     ),    ].divide(const SizedBox(height: 50)),   ),  ); }}class StepInformacoesPeca extends StatefulWidget { final String? genderInitialValue; final String? categoryInitialValue; final String? sizeInitialValue; final bool? shouldDisplaAll; const StepInformacoesPeca({  super.key,  this.genderInitialValue,  this.categoryInitialValue,  this.sizeInitialValue,  this.shouldDisplaAll, }); @override State<StepInformacoesPeca> createState() => StepInformacoesPecaState();}class StepInformacoesPecaState extends State<StepInformacoesPeca> { late String? selectedGender; late String? selectedCategory; late String? selectedSize; final List<GlobalKey<_ChoiceChips>> chipsGlobalKeys = [  GlobalKey<_ChoiceChips>(),  GlobalKey<_ChoiceChips>(),  GlobalKey<_ChoiceChips>(), ]; @override void initState() {  super.initState();  selectedGender = widget.genderInitialValue;  selectedCategory = widget.categoryInitialValue;  selectedSize = widget.sizeInitialValue; } @override void dispose() {  super.dispose(); } void updateGender(String newGender) {  setState(() {   if(widget.shouldDisplaAll == null){    chipsGlobalKeys[1].currentState?.choiceChipsValue = null;    selectedCategory = null;   }   if(selectedGender == chipsGlobalKeys[0].currentState!.choiceChipsValue){    selectedGender = null;    chipsGlobalKeys[0].currentState!.choiceChipsValue = null;    SearchFiltersDialog.gender = null;   }   else{    selectedGender = newGender;    chipsGlobalKeys[0].currentState!.choiceChipsValue = newGender;    if(widget.shouldDisplaAll == true){     SearchFiltersDialog.gender = newGender;    }   }  }); } void updateCategory(String newCategory) {  setState(() {   if(widget.shouldDisplaAll == null || selectedCategory == 'Calçados'){    chipsGlobalKeys[2].currentState?.choiceChipsValue = null;    selectedSize = null;    SearchFiltersDialog.size = null;   }   if(selectedCategory == chipsGlobalKeys[1].currentState!.choiceChipsValue){    selectedCategory = null;    chipsGlobalKeys[1].currentState!.choiceChipsValue = null;    SearchFiltersDialog.category = null;   }   else{    selectedCategory = newCategory;    chipsGlobalKeys[1].currentState!.choiceChipsValue = newCategory;    if(widget.shouldDisplaAll == true){     SearchFiltersDialog.category = newCategory;    }   }  }); } void updateSize(String newSize){  setState(() {   if(selectedSize == chipsGlobalKeys[2].currentState!.choiceChipsValue){    chipsGlobalKeys[2].currentState!.choiceChipsValue = null;    selectedSize = null;    SearchFiltersDialog.size = null;   }   else{    selectedSize = newSize;    if(widget.shouldDisplaAll == true){     SearchFiltersDialog.size = newSize;    }   }  }); } @override Widget build(BuildContext context) {  return Form(   child: Column(    mainAxisAlignment: MainAxisAlignment.start,    children: [     // layer 1     const homePage.HeaderTexts(title: 'Sexo', icon: Icons.man_2_rounded),     ChoiceChips(      key: chipsGlobalKeys[0],      optionsList: const [       ChipData('Masculino'),       ChipData('Feminino'),       ChipData('Unissex')      ],      updateParent: updateGender,      initialValue: widget.genderInitialValue,     ),     if (selectedGender != null || widget.shouldDisplaAll != null)      Column(       children: [        const homePage.HeaderTexts(            title: 'Categoria', icon: Icons.category_rounded),        ChoiceChips(         key: chipsGlobalKeys[1],         optionsList: selectedGender == 'Masculino'             ? [          const ChipData('Tops'),          const ChipData('Inferiores'),          const ChipData('Pijamas'),          const ChipData('Lingerie'),          const ChipData('Acessórios'),          const ChipData('Calçados'),          const ChipData('Roupas Sociais')         ]             : selectedGender == 'Feminino' ? [          const ChipData('Tops'),          const ChipData('Inferiores'),          const ChipData('Pijamas'),          const ChipData('Lingerie'),          const ChipData('Acessórios'),          const ChipData('Calçados'),          const ChipData('Vestidos'),         ] : [          const ChipData('Tops'),          const ChipData('Inferiores'),          const ChipData('Pijamas'),          const ChipData('Lingerie'),          const ChipData('Acessórios'),          const ChipData('Calçados'),          const ChipData('Vestidos'),          const ChipData('Roupas Sociais')         ],         updateParent: updateCategory,         initialValue: widget.categoryInitialValue,        )       ].divide(const SizedBox(height: 30)),      ),     if (shouldDisplaySizeChoiceChip())      Column(       children: [        const homePage.HeaderTexts(            title: 'Tamanho', icon: FontAwesomeIcons.check),        ChoiceChips(         key: chipsGlobalKeys[2],         optionsList: selectedCategory == 'Calçados'             ? [          const ChipData('34'),          const ChipData('35'),          const ChipData('36'),          const ChipData('37'),          const ChipData('38'),          const ChipData('39'),          const ChipData('40'),          const ChipData('41'),          const ChipData('42'),          const ChipData('43'),          const ChipData('44'),         ]             : [          const ChipData('PP'),          const ChipData('P'),          const ChipData('M'),          const ChipData('G'),          const ChipData('GG'),          const ChipData('XG'),          const ChipData('XXG'),         ],         initialValue: widget.sizeInitialValue,         updateParent: updateSize,        ),       ].divide(const SizedBox(height: 30)),      ),    ].divide(const SizedBox(height: 30)),   ),  ); } bool shouldDisplaySizeChoiceChip(){  if(selectedCategory == 'Acessórios') return false;  if(widget.shouldDisplaAll != null) return true;  if(selectedCategory == null) return false;  return true; }}class StepAvancado extends StatelessWidget { final GlobalKey<FormState> formKey; final TextEditingController priceController; final FocusNode priceFocusNode; final GlobalKey<SearchableDropDownState> searchableDropDownKey; final GeneralInfo? possibleSolicitacao; const StepAvancado({  super.key,  required this.formKey,  required this.priceController,  required this.priceFocusNode,  required this.searchableDropDownKey,  this.possibleSolicitacao, }); @override Widget build(BuildContext context) {  return Form(   key: formKey,   child: Column(    children: [     const homePage.HeaderTexts(         title: 'Loja para entrega', icon: Icons.store_rounded),     Text(      'Selecione a loja que você entregará a peça quando ela for vendida',      textAlign: TextAlign.center,      style: FlutterFlowTheme.of(context).bodyMedium.override(       fontFamily: 'Readex Pro',       color: const Color(0xFF343533),       letterSpacing: 0,      ),     ),     SizedBox(      width: MediaQuery.of(context).size.width,      height: 270,      child: SearchableDropDown(          key: searchableDropDownKey,          possibleSolicitacao: possibleSolicitacao),     ),     PriceField(      formKey: formKey,      priceController: priceController,      priceFocusNode: priceFocusNode,     ),    ].divide(const SizedBox(height: 20)),   ),  ); }}class ChoiceChips extends StatefulWidget { final List<ChipData> optionsList; final void Function(String value)? updateParent; final String? initialValue; const ChoiceChips({  super.key,  required this.optionsList,  this.initialValue,  this.updateParent, }); @override State<ChoiceChips> createState() => _ChoiceChips();}class _ChoiceChips extends State<ChoiceChips> { late FormFieldController<List<String>> choiceChipsValueController; final ListEquality equality = const ListEquality(); String? get choiceChipsValue => choiceChipsValueController.value?.firstOrNull; set choiceChipsValue(String? val) => choiceChipsValueController.value = val != null ? [val] : []; @override void initState() {  super.initState();  choiceChipsValueController =      FormFieldController<List<String>>([widget.initialValue ?? '']);  choiceChipsValue = widget.initialValue; } @override void dispose() {  super.dispose();  choiceChipsValue = ''; } @override Widget build(BuildContext context) {  return FlutterFlowChoiceChips(   options: widget.optionsList,   onChanged: (val) {    widget.updateParent!(val?.firstOrNull ?? 'Não informado');   },   selectedChipStyle: returnSelectedChipStyle(),   unselectedChipStyle: returnUnselectedChipStyle(),   chipSpacing: 12,   rowSpacing: 12,   multiselect: false,   alignment: WrapAlignment.start,   controller: choiceChipsValueController,   wrapped: true,  ); } ChipStyle returnSelectedChipStyle() {  return ChipStyle(   backgroundColor: FlutterFlowTheme.of(context).secondary,   textStyle: FlutterFlowTheme.of(context).bodyMedium.override(    fontFamily: 'Readex Pro',    color: FlutterFlowTheme.of(context).primaryText,    letterSpacing: 0,   ),   iconColor: FlutterFlowTheme.of(context).primaryText,   iconSize: 18,   elevation: 4,   borderRadius: BorderRadius.circular(16),  ); } ChipStyle returnUnselectedChipStyle() {  return ChipStyle(   backgroundColor: FlutterFlowTheme.of(context).secondaryText,   textStyle: FlutterFlowTheme.of(context).bodyMedium.override(    fontFamily: 'Readex Pro',    color: FlutterFlowTheme.of(context).primaryBackground,    letterSpacing: 0,   ),   iconColor: FlutterFlowTheme.of(context).primaryBackground,   iconSize: 18,   elevation: 0,   borderRadius: BorderRadius.circular(16),  ); }}class ImageContainer extends StatelessWidget { final file; final bool isFirst; final Function(dynamic) onPressed; const ImageContainer({  super.key,  required this.file,  required this.onPressed,  required this.isFirst, }); @override Widget build(BuildContext context) {  return Stack(   children: [    ClipRRect(     borderRadius: BorderRadius.circular(12),     child: Stack(      children: [       file is String           ? components.ImageWithPlaceholder(           image: file, width: 1000, height: 1000)           : Image.memory(        file.bytes ?? Uint8List.fromList([]),        width: 1000,        height: 1000,        fit: BoxFit.cover,        errorBuilder: (context, error, stackTrace) => Image.asset(         'assets/images/error_image.png',         fit: BoxFit.cover,        ),       ),       if (isFirst)        Padding(         padding: const EdgeInsets.all(8),         child: Align(          alignment: Alignment.bottomCenter,          child: Container(           width: MediaQuery.of(context).size.width,           height: 40,           decoration: BoxDecoration(               color: FlutterFlowTheme.of(context).success,               borderRadius: BorderRadius.circular(8)),           child: Padding(            padding: const EdgeInsets.all(4),            child: Align(             alignment: Alignment.center,             child: AutoSizeText(              'FOTO DA CAPA',              textAlign: TextAlign.center,              style: FlutterFlowTheme.of(context)                  .bodyMedium                  .override(               fontFamily: 'Readex Pro',               color:               FlutterFlowTheme.of(context).primaryText,               fontWeight: FontWeight.w500,              ),             ),            ),           ),          ),         ),        ),      ],     ),    ),    Align(     alignment: Alignment.topRight,     child: FlutterFlowIconButton(      borderColor: FlutterFlowTheme.of(context).error,      borderRadius: 20,      borderWidth: 1,      buttonSize: 35,      fillColor: const Color(0x54E74852),      icon: Icon(       Icons.close,       color: FlutterFlowTheme.of(context).error,       size: 20,      ),      onPressed: () {       onPressed(file);      },     ),    ),   ],  ); }}class StoreInfo { String imagePath; String address; StoreInfo({required this.imagePath, required this.address});}class SearchableDropDown extends StatefulWidget { SearchableDropDown({super.key, this.possibleSolicitacao}); final GeneralInfo? possibleSolicitacao; @override State<SearchableDropDown> createState() => SearchableDropDownState(); final TextEditingController textEditingController = TextEditingController();}class SearchableDropDownState extends State<SearchableDropDown> { String? selectedValue; String? selectedValueImage; Map<String, StoreInfo> storesDict = {}; @override void initState() {  super.initState();  // Pre-set selectedValue and selectedValueImage based on possibleSolicitacao if it exists  if (widget.possibleSolicitacao != null) {   selectedValue = widget.possibleSolicitacao!.store?.formattedAddress;   selectedValueImage = widget.possibleSolicitacao!.store?.storeImage;  } } @override Widget build(BuildContext context) {  return StreamBuilder<List<LojasDaEmpresaRecord>>(   stream: FFAppState().companyStores(    uniqueQueryKey: 'companyStores',    requestFn: () => queryLojasDaEmpresaRecord(),   ),   builder: (context, snapshot) {    if (!snapshot.hasData) {     return const components.LoadingIcon();    }    // Clear the dictionary and repopulate it    storesDict.clear();    for (var store in snapshot.data!) {     storesDict[store.formattedAddress] =         StoreInfo(imagePath: store.image, address: store.address);    }    // If no value was pre-set and there's data, set the first store as the default    if (selectedValue == null && storesDict.isNotEmpty) {     selectedValue = storesDict.keys.first;     selectedValueImage = storesDict[selectedValue]?.imagePath;    }    return Column(     children: [      Container(       width: MediaQuery.of(context).size.width,       height: 50,       decoration: BoxDecoration(        border: Border.all(         color: FlutterFlowTheme.of(context).primaryText,         width: 2,        ),        borderRadius: BorderRadius.circular(12),       ),       child: DropdownButtonHideUnderline(        child: DropdownButton2<String>(         isExpanded: true,         hint: Text(          'Selecione a loja',          style: FlutterFlowTheme.of(context).bodyMedium.override(           fontFamily: 'Readex Pro',           color: const Color.fromARGB(255, 67, 67, 67),           letterSpacing: 0,          ),         ),         items: storesDict.keys             .map((item) => DropdownMenuItem(          value: item,          child: Text(           item,           style: const TextStyle(            fontSize: 14,           ),          ),         ))             .toList(),         value: selectedValue,         onChanged: (value) {          setState(() {           selectedValue = value;           selectedValueImage = storesDict[value]?.imagePath;          });         },         buttonStyleData: const ButtonStyleData(          padding: EdgeInsets.symmetric(horizontal: 16),          height: 40,          width: 200,         ),         dropdownStyleData: const DropdownStyleData(          maxHeight: 200,         ),         menuItemStyleData: const MenuItemStyleData(          height: 40,         ),         dropdownSearchData: DropdownSearchData(          searchController: widget.textEditingController,          searchInnerWidgetHeight: 50,          searchInnerWidget: Container(           height: 50,           padding: const EdgeInsets.only(            top: 8,            bottom: 4,            right: 8,            left: 8,           ),           child: TextFormField(            expands: true,            maxLines: null,            controller: widget.textEditingController,            decoration: InputDecoration(             isDense: true,             contentPadding: const EdgeInsets.symmetric(              horizontal: 10,              vertical: 8,             ),             hintText: 'Procure por uma loja...',             hintStyle: const TextStyle(fontSize: 12),             border: OutlineInputBorder(              borderRadius: BorderRadius.circular(8),             ),            ),           ),          ),          searchMatchFn: (item, searchValue) {           return item.value.toString().contains(searchValue);          },         ),         // This clears the search value when you close the menu         onMenuStateChange: (isOpen) {          if (!isOpen) {           widget.textEditingController.clear();          }         },        ),       ),      ),      Container(       width: MediaQuery.of(context).size.width,       height: 200,       decoration: BoxDecoration(        color: const Color.fromARGB(16, 52, 53, 51),        border: Border.all(         color: FlutterFlowTheme.of(context).primaryText,         width: 2,        ),        borderRadius: BorderRadius.circular(12),       ),       child: ClipRRect(        borderRadius: BorderRadius.circular(12),        child: components.ImageWithPlaceholder(         image: selectedValueImage ?? '',         width: MediaQuery.of(context).size.width,         height: 200,        ),       ),      ),     ].divide(const SizedBox(height: 20)),    );   },  ); }}class ImagePicker extends StatefulWidget { const ImagePicker({super.key, this.solicitacao}); final GeneralInfo? solicitacao; @override State<ImagePicker> createState() => _ImagePicker();}class _ImagePicker extends State<ImagePicker> { bool firstLoad = true; bool isValid = false; List<FFUploadedFile> uploadedLocalFiles = []; late List<String> uploadedFirebaseImages; late List<String> firebaseImagesToDelete; late List<String> resetList; @override void initState() {  super.initState();  firebaseImagesToDelete = [];  uploadedFirebaseImages =  List<String>.from(widget.solicitacao?.nullableImages ?? []); } final int minImageLimit = 1; bool verifyUploadedFiles() {  return (uploadedLocalFiles.length + uploadedFirebaseImages.length) <      minImageLimit; } final int maxImageLimit = 5; final allowedExtensions = ['jpg', 'jpeg', 'png', 'webp']; final int maxSizeBytes = 3 * 1024 * 1024; // 3 MB in bytes void deletePickedImage(file) {  setState(() {   if (file is String) {    firebaseImagesToDelete.add(file);    uploadedFirebaseImages.remove(file);   } else {    uploadedLocalFiles.remove(file);   }  }); } void _pickImages() async {  final List<SelectedFile>? selectedMedia = await selectMedia(   maxWidth: 1000.00,   maxHeight: 1000.00,   imageQuality: 100,   mediaSource: MediaSource.photoGallery,   multiImage: true,  );  if (selectedMedia == null) {   return;  }  // Filter out files with unsupported extensions  final List<SelectedFile> filteredMedia = selectedMedia.where((m) {   final extension = m.storagePath.split('.').last.toLowerCase();   return allowedExtensions.contains(extension);  }).toList();  if (filteredMedia.length < selectedMedia.length) {   if (mounted) {    showSnackBar(context, 'Imagens inválidas',        'Algumas imagens não são válidas.', 'failure');   }  }  if (uploadedLocalFiles.length + filteredMedia.length > maxImageLimit) {   if (mounted) {    showSnackBar(        context,        'Limite excedido',        'Excluindo as últimas ${uploadedLocalFiles.length + filteredMedia.length - maxImageLimit} imagen(s)',        'info');   }   final int startIndexToRemove = maxImageLimit - uploadedLocalFiles.length;   filteredMedia.removeRange(startIndexToRemove, filteredMedia.length);  }  if (filteredMedia      .every((m) => validateFileFormat(m.storagePath, context))) {   var selectedUploadedFiles = <FFUploadedFile>[];   selectedUploadedFiles = filteredMedia       .map((m) => FFUploadedFile(    name: m.storagePath.split('/').last,    bytes: m.bytes,    height: m.dimensions?.height,    width: m.dimensions?.width,    blurHash: m.blurHash,   ))       .toList();   if (selectedUploadedFiles.length == filteredMedia.length) {    setState(() {     firstLoad = true;     uploadedLocalFiles = [      ...uploadedLocalFiles,      ...selectedUploadedFiles     ];    });   } else {    showUploadMessage(context, 'Falha no upload');    return;   }  } } Color getBorderColor() {  if (firstLoad) {   firstLoad = false;   return FlutterFlowTheme.of(context).primaryText;  } else if (!verifyUploadedFiles()) {   return FlutterFlowTheme.of(context).primaryText;  } else {   return Colors.red;  } } @override Widget build(BuildContext context) {  return Container(   width: MediaQuery.of(context).size.width,   height: 310,   decoration: BoxDecoration(    border: Border.all(     color: getBorderColor(),     width: 2,    ),    borderRadius: BorderRadius.circular(12),   ),   child: Padding(    padding: const EdgeInsets.all(24),    child: uploadedLocalFiles.isEmpty && uploadedFirebaseImages.isEmpty        ? InkWell(     onTap: _pickImages,     child: Column(      mainAxisAlignment: MainAxisAlignment.center,      children: [       Icon(        Icons.camera_alt_outlined,        color: FlutterFlowTheme.of(context).primaryText,        size: 80,       ),       Text(        'Insira fotos da peça, mínimo ($minImageLimit fotos), máximo ($maxImageLimit fotos), extensões permitidas: ${allowedExtensions.join(' ')}',        textAlign: TextAlign.center,        style: FlutterFlowTheme.of(context).bodyMedium.override(         fontFamily: 'Readex Pro',         color: FlutterFlowTheme.of(context).primaryText,         letterSpacing: 0,         decoration: TextDecoration.underline,        ),       ),      ],     ),    )        : GridView.builder(     gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(      crossAxisCount: 3,      crossAxisSpacing: 10,      mainAxisSpacing: 10,      childAspectRatio: 0.75,     ),     physics: const NeverScrollableScrollPhysics(),     scrollDirection: Axis.vertical,     itemCount: uploadedLocalFiles.length +         uploadedFirebaseImages.length +         (uploadedLocalFiles.length +             uploadedFirebaseImages.length >=             maxImageLimit             ? 0             : 1),     itemBuilder: (context, index) {      if (index < uploadedFirebaseImages.length) {       // Firebase images       return ImageContainer(        file: uploadedFirebaseImages[index],        onPressed: deletePickedImage,        isFirst: index == 0,       );      } else if (index <          uploadedLocalFiles.length +              uploadedFirebaseImages.length) {       // Local files       return ImageContainer(        file: uploadedLocalFiles[        index - uploadedFirebaseImages.length],        onPressed: deletePickedImage,        isFirst: index == 0,       );      } else {       // Add More Images button       return AddMoreImages(onPressed: _pickImages);      }     },    ),   ),  ); }}class TextInputField extends StatefulWidget { final TextEditingController controller; final FocusNode focusNode; final String label; final IconData? icon; final int maxLines; final FormFieldValidator<String> validator; final VoidCallback? updateParent; const TextInputField({  super.key,  required this.controller,  required this.focusNode,  required this.label,  this.icon,  required this.maxLines,  required this.validator,  this.updateParent, }); @override State<TextInputField> createState() => _TextInputField();}class _TextInputField extends State<TextInputField> { double labelHeight = 50; @override void initState() {  super.initState();  widget.focusNode.addListener(onFocusChange);  if (widget.controller.text.isNotEmpty) {   labelHeight = 20;  } else if (widget.focusNode.hasFocus) {   labelHeight = 20;  } else {   labelHeight = 50;  } } void onFocusChange() {  setState(() {   if (widget.controller.text.isNotEmpty) {    labelHeight = 20;   } else if (widget.focusNode.hasFocus) {    labelHeight = 20;   } else {    labelHeight = 50;   }  }); } @override void dispose() {  super.dispose();  widget.controller.dispose();  widget.focusNode.dispose(); } @override Widget build(BuildContext context) {  final bool isPriceTextField =      widget.label == 'Insira o valor que deseja receber da venda';  return Column(   children: [    TextFormField(     controller: widget.controller,     focusNode: widget.focusNode,     onChanged: (_) => EasyDebounce.debounce(      'widget.controller',      const Duration(milliseconds: 1),          () => widget.updateParent?.call(),     ),     decoration: returnInputDecoration(context, isPriceTextField),     style: FlutterFlowTheme.of(context).bodyMedium.override(      fontFamily: 'Readex Pro',      fontSize: 14,      fontWeight: FontWeight.w500,     ),     maxLines: widget.maxLines,     validator: widget.validator,     keyboardType: isPriceTextField ? TextInputType.number : null,    ),   ],  ); } InputDecoration returnInputDecoration(     BuildContext context, bool isPriceTextField) {  return InputDecoration(   label: SizedBox(    height: labelHeight,    child: Align(     alignment: const AlignmentDirectional(-1, 0),     child: AutoSizeText(      widget.label,      minFontSize: 10,     ),    ),   ),   prefixText: isPriceTextField ? 'R\$ ' : null,   labelStyle: FlutterFlowTheme.of(context).labelMedium.override(    fontFamily: 'Readex Pro',    fontSize: 13,   ),   hintText: isPriceTextField ? '123.456,00' : null,   hintStyle: FlutterFlowTheme.of(context).labelMedium.override(    fontFamily: 'Readex Pro',   ),   enabledBorder: UnderlineInputBorder(    borderSide: BorderSide(        color: FlutterFlowTheme.of(context).secondaryText, width: 2),   ),   focusedBorder: UnderlineInputBorder(    borderSide: BorderSide(        color: FlutterFlowTheme.of(context).primaryText, width: 2),   ),   errorBorder: UnderlineInputBorder(    borderSide:    BorderSide(color: FlutterFlowTheme.of(context).error, width: 2),   ),   prefixIcon: Icon(    widget.icon,    color: FlutterFlowTheme.of(context).primaryText,    size: 27,   ),  ); } String getControllerValue() {  return widget.controller.text; }}class PriceField extends StatefulWidget { final TextEditingController priceController; final GlobalKey<FormState> formKey; final FocusNode priceFocusNode; static final RegExp validationPattern = RegExp(r'^(\d{1,3}(\.\d{3})*|\d+)(,\d{2})?$'); static String? finalPrice; PriceField({  super.key,  required this.priceController,  required this.priceFocusNode,  required this.formKey, }); @override State<PriceField> createState() => _PriceField();}class _PriceField extends State<PriceField> { @override Widget build(BuildContext context) {  return Column(   mainAxisAlignment: MainAxisAlignment.start,   children: [    const homePage.HeaderTexts(        title: 'Preço da peça', icon: FontAwesomeIcons.moneyBillWave),    Align(     alignment: Alignment.centerLeft,     child: Text(      'Taxa de ${components.ConfigClass.fee}% sobre o preço do produto',      style: FlutterFlowTheme.of(context).bodyMedium.override(       fontFamily: 'Readex Pro',       color: FlutterFlowTheme.of(context).error,       fontSize: 15,       fontWeight: FontWeight.bold,      ),     ),    ),    Column(     children: [      TextInputField(       controller: widget.priceController,       focusNode: widget.priceFocusNode,       label: 'Insira o valor que deseja receber da venda',       icon: FontAwesomeIcons.moneyBillTrendUp,       maxLines: 1,       validator: (value) {        if (value == null) return 'Campo obrigatório';        if (!PriceField.validationPattern.hasMatch(value)) {         return 'Insira um preço válido';        }        return null;       },       updateParent: () {        setState(() {         widget.formKey.currentState!.validate();         PriceField.finalPrice = widget.priceController.text;        });       },      ),      if (PriceField.validationPattern.hasMatch(widget.priceController.text))       Align(        alignment: const AlignmentDirectional(-1, 0),        child: Text(         'Preço de venda da peça (${widget.priceController.text} + ${components.ConfigClass.fee.toString()}%): R\$${returnNewPrice(widget.priceController.text)} reais',         textAlign: TextAlign.start,         style: FlutterFlowTheme.of(context).bodyMedium.override(          fontFamily: 'Readex Pro',          fontSize: 12,          color: FlutterFlowTheme.of(context).alternate,         ),        ),       ),     ],    ),   ].divide(const SizedBox(height: 20)),  ); } String returnNewPrice(String price) {  double newPrice = convertStringToDouble(price);  newPrice = newPrice * (1 + (components.ConfigClass.fee / 100.0));  String convertedNewPrice = convertDoubleToString(newPrice);  return convertedNewPrice; }}